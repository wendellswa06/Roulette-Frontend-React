import React, {FC, useContext, useEffect, useState } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import Modal from '../Modal';
import {Button} from '../Button';
import { Store } from 'react-notifications-component';
import axios from 'axios';
import {SERVER_URL} from '../../constant/env';
import './index.css'
interface ModalInterface{
    title:string;
    visible:boolean;
    close:() => void;
}
const Fairness : FC<ModalInterface> = (props:ModalInterface)=>{

    const [fairRoulette, setFairRoulette] = useState<any>([]);
    useEffect(()=>{
        if(props.visible)
        getProvableFairRoulette();
    }, [props.visible])

    const getProvableFairRoulette = () => {
        axios.get(SERVER_URL + 'provablyfair').then(result => {
            if(result.data.status)
                setFairRoulette(result.data.data)
        })
    }
    const codeObj = `const secret = "Replace this with the UNHASHED seed of the day";
const round = "Replace this with the round's number";   

function getRandom({ secret, round, middle = 75}){
    var gameHash = sha256(secret + "-" + round);    
    var hash = gameHash.substr(0, 8);
    var rolls = converter.hexToDec(hash);
    var ran = rolls % (middle - 35) + 5;
    var winColor = (middle + ran) % 15;
    return winColor;
}`
    return (
        <Modal extend = {true} close={props.close} title={'FAIRNESS'} visible={props.visible} >
            <div style={{marginTop : '16px'}}>
            <div className="accordion" id="accordionExample">
                <div className="">
                    <div className="" id="headingOne">
                        <h5>
                            <div className="faq" data-toggle="collapse" data-target="#collapseOne">HOW CAN I KNOW THAT THE GAME IS FAIR? <i className="fa fa-caret-down" aria-hidden="true"></i></div>									
                        </h5>
                    </div>
                    <div id="collapseOne" className="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
                        <div className="faq_content">
                        <p>The game results have been generated BEFORE you even place your bet,and most importantly, we can prove it. We give you each round result in a hashed format, which is generated with secret seed and round number. And Secret seed is randomly generated by system each 5 rounds and previous secret seed is showed to you.</p><br/>
						<p> You can confirm yourself that each round result is based on fairness algorithm by calculating hashed seed with secret seed provided. With this system we can prove that the results were fair and pre-generated.</p><br/>
						<p>To verify the seed, able to use an online tool like Xorbin to generate hashed seed. </p><br/>
                        </div>
                    </div>
                </div>
                <div className="">
                    <div className="" id="headingTwo">
                        <h5>
                            <div className="faq" data-toggle="collapse" data-target="#collapseTwo">IMPLEMENT<i className="fa fa-caret-down" aria-hidden="true"></i></div>
                        </h5>
                    </div>
                    <div id="collapseTwo" className="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
                        <div className="faq_content">
                            <p>Roulette has 15 possible outcomes. Outcome 9 will always be yellow,  the other outcomes (0, 2, 4, 6, 8, 11, 13) are assigned to white and otherwise are assigned to purple on the wheel.</p>
                            <p>Every 5 rounds, a string of random letters and numbers is generated that will be used to generate all outcomes. We refer to this as the Seed or Secret.Usually, each seed is used for 5 rounds. We display the SHA256-Hash of the seed below.</p>
                            <p>Since the SHA256 function is deterministic (meaning it will always output the same result for the same input) we can prove that the outcome of each round has not been changed  to favor the house.</p>
                            <p>{`A Unique Round Number is added to the end of the seed every round. The resulting string, in the format of {seed}-{nonce} will determine the round's outcome.`}</p>
                            <pre style={{color : 'white', background : 'black', padding : '16px', borderRadius : '10px'}}>
                                <code>
                                {codeObj}

                                </code>
                            </pre>
                            <div>
                                <h2 className="page-title">Secret Seed</h2>
                                <p>
                                    The server seed is generated by our system as a random 64-character hex string. You will then be provided with an encrypted hash of the server seed after each round. Usually, each seed is used for 5 rounds; it's hidden for as long as its being used. The seed still provide the guarantee that the outcome has been pre-determined and not changed after the bet has been made.
                                </p>
                                <h2 className="page-title">Round Number</h2>
                                <p>Each round has a unique round number (1,2,3,4,5). That number increments every round while the secret seed is not updated.</p>
                                
                            </div>
                        </div>
                    </div>
                </div>
                <div className="">
                    <div className="" id="headingThree">
                        <h5>
                            <div className="faq" data-toggle="collapse" data-target="#collapseThree">Calculation <i className="fa fa-caret-down" aria-hidden="true"></i></div>                     
                        </h5>
                    </div>
                    <div id="collapseThree" className="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
                        <div className="faq_content">
                            
                                <div style={{display : 'flex', marginBottom : '16px', marginTop : '16px'}} >
                                    <div style={{borderBottom : '1px solid white', marginRight : '8px', width : '50px'}}>No</div>
                                    <div style={{borderBottom : '1px solid white', marginRight : '8px', width : '60px', textAlign : 'center'}}>Round</div>
                                    <div style={{ borderBottom : '1px solid white',marginRight : '8px', width : '40%', textOverflow : 'ellipsis', overflow : 'hidden', textAlign : 'center'}}>Seed</div>
                                    <div style={{ borderBottom : '1px solid white',marginRight : '8px', width : '40%', textOverflow : 'ellipsis', overflow : 'hidden', textAlign : 'center'}}>Hash</div>
                                </div>  

                            {fairRoulette.map((item :any, idx : number) => (
                                <div style={{display : 'flex', }} key={idx}>
                                    <div style={{marginRight : '8px', width : '50px'}}>{item.id}</div>
                                    <div style={{marginRight : '8px', width : '60px', textAlign : 'center'}}>{item.game_number}</div>
                                    <div style={{marginRight : '8px', width : '40%',textAlign : 'center', textOverflow : 'ellipsis', overflow : 'hidden'}}>
                                        <input className='fairinput' type='text' readOnly  value={item.hash_salt || 'no reveal'} />
                                    </div>

                                    <div style={{marginRight : '8px', width : '40%',textAlign : 'center', textOverflow : 'ellipsis', overflow : 'hidden'}}>
                                        <input className='fairinput' type='text' readOnly  value={item.game_hash || 'no reveal'} />
                                    </div>
                                </div>  
                            ))}
                             
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </Modal>
        
    )
}

export default Fairness;